const assert = require('node:assert');

/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function (grid) {
  let islandCount = 0;

  for (let x = 0; x < grid.length; x++) {
    for (let y = 0; y < grid[0].length; y++) {
      const point = grid[x][y];

      if (point === '1') {
        islandCount++;
        dfsRecursive(grid, x, y);
      }
    }
  }

  return islandCount;
};

function dfs(grid, x, y) {
  const stack = [[x, y]];

  while (stack.length) {
    const [row, col] = stack.pop();

    if (row < 0 || row >= grid.length) {
      continue;
    }

    if (col < 0 || col >= grid[0].length) {
      continue;
    }

    if (grid[row][col] === '2' || grid[row][col] === '0') {
      continue;
    }

    grid[row][col] = '2';

    stack.push([row - 1, col], [row + 1, col], [row, col - 1], [row, col + 1]);
  }
}

function dfsRecursive(grid, x, y) {
  if (x < 0 || x >= grid.length) {
    return;
  }

  if (y < 0 || y >= grid[0].length) {
    return;
  }

  if (grid[x][y] === '2' || grid[x][y] === '0') {
    return;
  }

  grid[x][y] = '2';

  dfsRecursive(grid, x - 1, y);
  dfsRecursive(grid, x + 1, y);
  dfsRecursive(grid, x, y - 1);
  dfsRecursive(grid, x, y + 1);
}

assert.equal(
  numIslands([
    ['1', '1', '1', '1', '0'],
    ['1', '1', '0', '1', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '0', '0', '0'],
  ]),
  1,
);

assert.equal(
  numIslands([
    ['1', '1', '0', '0', '0'],
    ['1', '1', '0', '0', '0'],
    ['0', '0', '1', '0', '0'],
    ['0', '0', '0', '1', '1'],
  ]),
  3,
);

assert.equal(
  numIslands([
    ['1', '1', '1', '1', '0'],
    ['1', '1', '0', '1', '0'],
    ['0', '0', '1', '1', '0'],
    ['0', '0', '0', '0', '1'],
  ]),
  2,
);
assert.equal(
  numIslands([
    ['1', '0', '1', '1', '1'],
    ['1', '0', '1', '0', '1'],
    ['1', '1', '1', '0', '1'],
  ]),
  1,
);
assert.equal(
  numIslands([
    ['1', '1', '1'],
    ['0', '1', '0'],
    ['1', '1', '1'],
  ]),
  1,
);
assert.equal(
  numIslands([
    ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1'],
    ['1', '0', '1', '0', '1', '1', '1', '1', '1', '1'],
    ['0', '1', '1', '1', '0', '1', '1', '1', '1', '1'],
    ['1', '1', '0', '1', '1', '0', '0', '0', '0', '1'],
    ['1', '0', '1', '0', '1', '0', '0', '1', '0', '1'],
    ['1', '0', '0', '1', '1', '1', '0', '1', '0', '0'],
    ['0', '0', '1', '0', '0', '1', '1', '1', '1', '0'],
    ['1', '0', '1', '1', '1', '0', '0', '1', '1', '1'],
    ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1'],
    ['1', '0', '1', '1', '1', '1', '1', '1', '1', '0'],
  ]),
  2,
);
assert.equal(
  numIslands([
    ['1', '0', '1', '1', '0', '0', '1', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '0'],
    ['0', '1', '0', '0', '1', '0', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1'],
    ['1', '0', '0', '1', '0', '1', '0', '1', '0', '1', '1', '0', '1', '1', '1', '0', '0', '1', '1', '0'],
    ['0', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1', '0', '0', '0', '1', '1'],
    ['1', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1'],
    ['0', '0', '0', '0', '1', '0', '1', '1', '0', '0', '1', '0', '0', '1', '0', '1', '1', '1', '1', '0'],
    ['1', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '0', '1', '1', '1', '0', '0', '1', '0'],
    ['0', '1', '1', '0', '0', '0', '1', '0', '0', '1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1'],
    ['0', '0', '0', '0', '1', '1', '0', '1', '0', '0', '1', '1', '0', '1', '0', '0', '1', '0', '1', '0'],
    ['0', '0', '1', '1', '1', '0', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'],
    ['1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '0', '1', '0', '1', '0', '1', '1'],
    ['0', '0', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '0', '0', '0', '1', '1', '1', '0', '1'],
    ['1', '1', '1', '0', '0', '0', '0', '0', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0'],
    ['0', '0', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0'],
    ['0', '0', '0', '1', '1', '0', '0', '0', '0', '1', '1', '0', '1', '0', '0', '1', '1', '1', '1', '1'],
    ['0', '1', '1', '1', '0', '1', '0', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '0', '1'],
    ['0', '0', '0', '0', '1', '1', '1', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '1', '0'],
    ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1'],
    ['0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1'],
    ['0', '0', '1', '1', '1', '1', '1', '0', '0', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0'],
  ]),
  23,
);
